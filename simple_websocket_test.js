const WebSocket = require('ws');
const http = require('http');

console.log('üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç WebSocket –∏–≥—Ä—ã...');

let sessionId;

// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ HTTP API
function createSession() {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify({
      preflopHistory: "PokerStars Hand #123456789: Hold'em No Limit ($5/$10 USD) - 2024/01/01 12:00:00 ET\nTable 'Test' 2-max Seat #1 is the button\nSeat 1: Player1 ($1000 in chips)\nSeat 2: Player2 ($1000 in chips)\nPlayer1: posts small blind $5\nPlayer2: posts big blind $10\n*** HOLE CARDS ***\nPlayer1: calls $5\nPlayer2: checks\n*** FLOP ***",
      boardSettings: {
        flopSettings: { specific: false, twoTone: false, rainbow: false, monotone: false, paired: false },
        turnSettings: { enabled: true },
        riverSettings: { enabled: true }
      },
      handRanges: {
        player1: ['AA', 'KK'],
        player2: ['AK', 'AQ']
      },
      tableCount: 1,
      betSizes: { quarter: true, half: true, threeQuarter: true, pot: true, allIn: true }
    });

    const options = {
      hostname: 'localhost',
      port: 5000,
      path: '/api/create-session',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          const response = JSON.parse(data);
          sessionId = response.sessionId;
          console.log(`‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${sessionId}`);
          resolve(sessionId);
        } catch (error) {
          reject(error);
        }
      });
    });

    req.on('error', reject);
    req.write(postData);
    req.end();
  });
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–≥—Ä—É
async function testGame() {
  try {
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    await createSession();
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const player1 = new WebSocket('ws://localhost:5000');
    
    player1.on('open', () => {
      console.log('üîó –ò–≥—Ä–æ–∫ 1 –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è');
      player1.send(JSON.stringify({
        type: 'join_session',
        sessionId: sessionId,
        tableId: 1,
        playerId: 1,
        playerName: '–¢–µ—Å—Ç–µ—Ä1'
      }));
    });
    
    player1.on('message', (data) => {
      const message = JSON.parse(data.toString());
      console.log(`üì® –ò–≥—Ä–æ–∫ 1 –ø–æ–ª—É—á–∏–ª: ${message.type}`);
      
      if (message.type === 'game_state') {
        console.log(`   –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${message.table.currentStreet}, –∏–≥—Ä–æ–∫ ${message.table.currentPlayer}, –±–∞–Ω–∫ ${message.table.pot}`);
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        setTimeout(() => {
          const player2 = new WebSocket('ws://localhost:5000');
          
          player2.on('open', () => {
            console.log('üîó –ò–≥—Ä–æ–∫ 2 –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è');
            player2.send(JSON.stringify({
              type: 'join_session',
              sessionId: sessionId,
              tableId: 1,
              playerId: 2,
              playerName: '–¢–µ—Å—Ç–µ—Ä2'
            }));
          });
          
          player2.on('message', (data) => {
            const message = JSON.parse(data.toString());
            console.log(`üì® –ò–≥—Ä–æ–∫ 2 –ø–æ–ª—É—á–∏–ª: ${message.type}`);
            
            if (message.type === 'game_state') {
              console.log(`   –ò–≥—Ä–æ–∫ 2 –≥–æ—Ç–æ–≤: ${message.table.currentStreet}, –∏–≥—Ä–æ–∫ ${message.table.currentPlayer}`);
              
              // –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É - –∏–≥—Ä–æ–∫ 1 –¥–µ–ª–∞–µ—Ç –±–µ—Ç
              setTimeout(() => {
                console.log('üéØ –ò–≥—Ä–æ–∫ 1 –¥–µ–ª–∞–µ—Ç –±–µ—Ç 50');
                player1.send(JSON.stringify({
                  type: 'player_action',
                  sessionId: sessionId,
                  tableId: 1,
                  playerId: 1,
                  action: 'bet',
                  amount: 50
                }));
              }, 500);
            }
            
            if (message.type === 'table_update') {
              console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞ 2: ${message.table.currentStreet}, –∏–≥—Ä–æ–∫ ${message.table.currentPlayer}, –±–∞–Ω–∫ ${message.table.pot}`);
              
              // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ 2 –∏ —ç—Ç–æ —Ñ–ª–æ–ø
              if (message.table.currentPlayer === 2 && message.table.currentStreet === 'flop') {
                setTimeout(() => {
                  console.log('üéØ –ò–≥—Ä–æ–∫ 2 –∫–æ–ª–ª–∏—Ä—É–µ—Ç 50');
                  player2.send(JSON.stringify({
                    type: 'player_action',
                    sessionId: sessionId,
                    tableId: 1,
                    playerId: 2,
                    action: 'call',
                    amount: 50
                  }));
                }, 500);
              }
              
              // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ 2 –∏ —ç—Ç–æ —Ç—ë—Ä–Ω
              if (message.table.currentPlayer === 2 && message.table.currentStreet === 'turn') {
                setTimeout(() => {
                  console.log('üéØ –ò–≥—Ä–æ–∫ 2 —á–µ–∫–∞–µ—Ç –Ω–∞ —Ç—ë—Ä–Ω–µ');
                  player2.send(JSON.stringify({
                    type: 'player_action',
                    sessionId: sessionId,
                    tableId: 1,
                    playerId: 2,
                    action: 'check'
                  }));
                }, 500);
              }
              
              // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ 2 –∏ —ç—Ç–æ —Ä–∏–≤–µ—Ä
              if (message.table.currentPlayer === 2 && message.table.currentStreet === 'river') {
                setTimeout(() => {
                  console.log('üéØ –ò–≥—Ä–æ–∫ 2 —á–µ–∫–∞–µ—Ç –Ω–∞ —Ä–∏–≤–µ—Ä–µ');
                  player2.send(JSON.stringify({
                    type: 'player_action',
                    sessionId: sessionId,
                    tableId: 1,
                    playerId: 2,
                    action: 'check'
                  }));
                }, 500);
              }
            }
          });
          
        }, 1000);
      }
      
      if (message.type === 'table_update') {
        console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞ 1: ${message.table.currentStreet}, –∏–≥—Ä–æ–∫ ${message.table.currentPlayer}, –±–∞–Ω–∫ ${message.table.pot}`);
        
        // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ 1 –∏ —ç—Ç–æ —Ç—ë—Ä–Ω
        if (message.table.currentPlayer === 1 && message.table.currentStreet === 'turn') {
          setTimeout(() => {
            console.log('üéØ –ò–≥—Ä–æ–∫ 1 —á–µ–∫–∞–µ—Ç –Ω–∞ —Ç—ë—Ä–Ω–µ');
            player1.send(JSON.stringify({
              type: 'player_action',
              sessionId: sessionId,
              tableId: 1,
              playerId: 1,
              action: 'check'
            }));
          }, 500);
        }
        
        // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ 1 –∏ —ç—Ç–æ —Ä–∏–≤–µ—Ä
        if (message.table.currentPlayer === 1 && message.table.currentStreet === 'river') {
          setTimeout(() => {
            console.log('üéØ –ò–≥—Ä–æ–∫ 1 —á–µ–∫–∞–µ—Ç –Ω–∞ —Ä–∏–≤–µ—Ä–µ');
            player1.send(JSON.stringify({
              type: 'player_action',
              sessionId: sessionId,
              tableId: 1,
              playerId: 1,
              action: 'check'
            }));
          }, 500);
        }
        
        // –ï—Å–ª–∏ —Ä—É–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if (message.actionResult?.handComplete) {
          console.log(`üèÜ –†—É–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${message.actionResult.winner}`);
          setTimeout(() => {
            player1.close();
            process.exit(0);
          }, 1000);
        }
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

testGame(); 