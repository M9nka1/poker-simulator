import React, { useState, useEffect } from 'react';
import './App.css';
import SetupPage from './components/SetupPage';
import GamePage from './components/GamePage';
import JoinSessionPage from './components/JoinSessionPage';
import TablePage from './components/TablePage';
import CardSpriteEditor from './components/CardSpriteEditor';
import CardTestPage from './components/CardTestPage';
import CardPositionTuner from './components/CardPositionTuner';
import OptimizedCardTest from './components/OptimizedCardTest';
import LayoutDebugger from './components/LayoutDebugger';
import HandRangeTest from './components/HandRangeTest';
import TestWindow from './components/TestWindow';
import config from './config';

export interface GameSession {
  sessionId: string;
  sessionIds?: string[]; // –ú–∞—Å—Å–∏–≤ ID —Å–µ—Å—Å–∏–π –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤
  tables: any[];
  settings: any;
  playerNames: string[];
  preflopInfo?: any;
  isGuest?: boolean;
}

function App() {
  const [currentPage, setCurrentPage] = useState<'setup' | 'game' | 'join' | 'table' | 'sprite-editor' | 'card-test' | 'card-position' | 'optimized-card-test' | 'layout-debugger' | 'hand-range-test' | 'test-window'>('setup');
  const [gameSession, setGameSession] = useState<GameSession | null>(null);
  const [tableParams, setTableParams] = useState<any>(null);

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≥–æ—Å—Ç—è –∫ —Å–µ—Å—Å–∏–∏
  const joinSessionAsGuest = async (sessionId: string, tableStyle: string = 'modern') => {
    try {
      console.log('üîó Auto-joining session as guest:', sessionId);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
      const response = await fetch(`${config.apiBaseUrl}/api/session/${sessionId}`);
      
      if (!response.ok) {
        throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      }
      
      const sessionData = await response.json();
      console.log('üìä Session data for guest:', sessionData);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–æ–≤ –≤ —Å–µ—Å—Å–∏–∏
      const tableCount = sessionData.tables ? sessionData.tables.length : 1;
      console.log(`üéØ Opening ${tableCount} tables for guest in modern style`);
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–∞ –≤ —Å–µ—Å—Å–∏–∏ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ
      let openedWindows = 0;
      
      for (let i = 0; i < tableCount; i++) {
        const table = sessionData.tables[i] || { id: i + 1 };
        
        setTimeout(() => {
          const opened = openGuestTableWindow(sessionId, table.id, sessionData.playerNames || ['Player1', 'Player2'], i);
          if (opened) {
            openedWindows++;
          }
        }, i * 200); // 200ms –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–∫–Ω–∞–º–∏
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      setTimeout(() => {
        alert(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏ –∫–∞–∫ –≥–æ—Å—Ç—å!\n–û—Ç–∫—Ä—ã—Ç–æ ${tableCount} —Å—Ç–æ–ª–æ–≤ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ.\n–í—ã –∏–≥—Ä–∞–µ—Ç–µ –∫–∞–∫ –ò–≥—Ä–æ–∫ 2.`);
      }, tableCount * 200 + 500);
      
      console.log('‚úÖ Successfully initiated guest connection with modern tables');
      
    } catch (error) {
      console.error('‚ùå Error joining session as guest:', error);
      alert(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏: ${(error as Error).message}`);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–∞ –¥–ª—è –≥–æ—Å—Ç—è
  const openGuestTableWindow = (sessionId: string, tableId: number, playerNames: string[], windowIndex: number): boolean => {
    try {
      // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–∞ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ
      const baseUrl = config.apiBaseUrl;
      const tableUrl = new URL(baseUrl);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ hash –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≥–æ—Å—Ç—è
      tableUrl.hash = `table?sessionId=${sessionId}&tableId=${tableId}&playerNames=${encodeURIComponent(JSON.stringify(playerNames))}&tableStyle=modern&isGuest=true`;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –æ–∫–Ω–∞
      const windowWidth = 1200;
      const windowHeight = 800;
      const offsetX = windowIndex * 50; // –°–º–µ—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–∫–Ω–∞
      const offsetY = windowIndex * 50;
      const startX = 100 + offsetX;
      const startY = 100 + offsetY;
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞ –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –±–µ–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±—Ä–∞—É–∑–µ—Ä–∞
      const windowFeatures = [
        `width=${windowWidth}`,
        `height=${windowHeight}`,
        `left=${startX}`,
        `top=${startY}`,
        'resizable=yes',
        'scrollbars=no',
        'status=no',
        'menubar=no',
        'toolbar=no',
        'location=no',
        'directories=no'
      ].join(',');
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
      const newWindow = window.open(
        tableUrl.toString(),
        `poker-guest-modern-table-${sessionId}-${tableId}`,
        windowFeatures
      );
      
      if (newWindow) {
        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
        newWindow.focus();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        newWindow.addEventListener('load', () => {
          newWindow.document.title = `–ü–æ–∫–µ—Ä–Ω—ã–π —Å—Ç–æ–ª #${tableId} - –°–µ—Å—Å–∏—è ${sessionId.substring(0, 8)} (–ì–æ—Å—Ç—å)`;
        });
        
        console.log(`ü™ü Opened guest window for table ${tableId} at position (${startX}, ${startY})`);
        return true;
      } else {
        console.error(`‚ùå Failed to open guest window for table ${tableId}`);
        return false;
      }
    } catch (error: any) {
      console.error(`‚ùå Exception when opening guest window for table ${tableId}:`, error);
      return false;
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º hash –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—Ç–æ–ª
  useEffect(() => {
    const checkHash = () => {
      const hash = window.location.hash;
      if (hash === '#sprite-editor') {
        setCurrentPage('sprite-editor');
      } else if (hash === '#card-test') {
        setCurrentPage('card-test');
      } else if (hash === '#card-position') {
        setCurrentPage('card-position');
      } else if (hash === '#optimized-card-test') {
        setCurrentPage('optimized-card-test');
      } else if (hash === '#layout-debugger') {
        setCurrentPage('layout-debugger');
      } else if (hash === '#hand-range-test') {
        setCurrentPage('hand-range-test');
      } else if (hash === '#test-window') {
        setCurrentPage('test-window');
      } else if (hash.startsWith('#table?')) {
        // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ hash –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–∞ (—Ö–æ—Å—Ç)
        const params = new URLSearchParams(hash.substring(7)); // —É–±–∏—Ä–∞–µ–º '#table?'
        const sessionId = params.get('sessionId');
        const tableId = params.get('tableId');
        const playerNames = params.get('playerNames') 
          ? JSON.parse(decodeURIComponent(params.get('playerNames')!)) 
          : [];
        const tableStyle = params.get('tableStyle') || 'classic';

        if (sessionId && tableId) {
          setTableParams({
            sessionId,
            tableId: parseInt(tableId),
            playerNames,
            tableStyle
          });
          setCurrentPage('table');
        }
      } else if (hash.startsWith('#join?')) {
        // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≥–æ—Å—Ç—è –∫ —Å–µ—Å—Å–∏–∏
        const params = new URLSearchParams(hash.substring(6)); // —É–±–∏—Ä–∞–µ–º '#join?'
        const sessionId = params.get('sessionId');
        const isGuest = params.get('isGuest') === 'true';
        const tableStyle = params.get('tableStyle') || 'modern';

        if (sessionId && isGuest) {
          console.log('üîó Guest joining session from URL:', sessionId);
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Å—Å–∏–∏ –∫–∞–∫ –≥–æ—Å—Ç—å
          joinSessionAsGuest(sessionId, tableStyle);
        }
      }
    };

    checkHash();

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è hash
    window.addEventListener('hashchange', checkHash);
    return () => window.removeEventListener('hashchange', checkHash);
  }, []);

  const handleSessionCreated = (session: GameSession) => {
    setGameSession(session);
    setCurrentPage('game');
  };

  const handleSessionJoined = (session: GameSession) => {
    setGameSession(session);
    setCurrentPage('game');
  };

  const handleBackToSetup = () => {
    setCurrentPage('setup');
    setGameSession(null);
    window.location.hash = '';
  };

  const handleGoToJoin = () => {
    setCurrentPage('join');
  };

  // –ï—Å–ª–∏ —ç—Ç–æ –æ–∫–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
  if (currentPage === 'table' && tableParams) {
    return <TablePage {...tableParams} />;
  }

  // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä sprite sheet
  if (currentPage === 'sprite-editor') {
    return <CardSpriteEditor />;
  }

  // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ä—Ç
  if (currentPage === 'card-test') {
    return <CardTestPage />;
  }

  // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç
  if (currentPage === 'card-position') {
    return <CardPositionTuner />;
  }

  // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
  if (currentPage === 'optimized-card-test') {
    return <OptimizedCardTest />;
  }

  // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–ª–∞–¥—á–∏–∫ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  if (currentPage === 'layout-debugger') {
    return <LayoutDebugger />;
  }

  // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—É–∫
  if (currentPage === 'hand-range-test') {
    return <HandRangeTest />;
  }

  // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
  if (currentPage === 'test-window') {
    return <TestWindow />;
  }

  return (
    <div className="App">
      <header className="App-header">
        <h1>üÉè Poker Simulator - Hand2Note Integration</h1>
        <p>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∫–µ—Ä–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä —Å –Ω–∞—á–∞–ª–æ–º –Ω–∞ —Ñ–ª–æ–ø–µ</p>
      </header>
      
      <main className="App-main">
        {currentPage === 'setup' ? (
          <SetupPage 
            onSessionCreated={handleSessionCreated}
            onGoToJoin={handleGoToJoin}
          />
        ) : currentPage === 'join' ? (
          <JoinSessionPage
            onSessionJoined={handleSessionJoined}
            onBackToSetup={handleBackToSetup}
          />
        ) : (
          <GamePage 
            session={gameSession!} 
            onBackToSetup={handleBackToSetup}
          />
        )}
      </main>
    </div>
  );
}

export default App;
