import React, { useState } from 'react';
import './TestWindow.css';

const TestWindow: React.FC = () => {
  const [isPanelOpen, setIsPanelOpen] = useState(false);

  const togglePanel = () => {
    setIsPanelOpen(!isPanelOpen);
  };

  // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É 75 —Å—Ç—Ä–æ–∫ –∏ 25 –∫–æ–ª–æ–Ω–æ–∫
  const renderGrid = () => {
    const cells = [];
    for (let row = 0; row < 75; row++) {
      for (let col = 0; col < 25; col++) {
        cells.push(
          <div 
            key={`${row}-${col}`} 
            className="grid-cell"
            data-row={row + 1}
            data-col={col + 1}
          />
        );
      }
    }
    return cells;
  };

  return (
    <div className="test-window">
      {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ */}
      <button 
        className={`panel-toggle-btn ${isPanelOpen ? 'active' : ''}`}
        onClick={togglePanel}
        aria-label={isPanelOpen ? '–ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å' : '–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å'}
      >
        <span className="toggle-icon">
          {isPanelOpen ? '‚úï' : '‚ò∞'}
        </span>
      </button>

      {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
      <div className={`side-panel ${isPanelOpen ? 'open' : ''}`}>
        <div className="panel-header">
          <h2>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h2>
          <button 
            className="close-btn"
            onClick={togglePanel}
            aria-label="–ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å"
          >
            ‚úï
          </button>
        </div>
        
        <div className="panel-content">
          <div className="grid-container">
            {renderGrid()}
          </div>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className={`main-content ${isPanelOpen ? 'panel-open' : ''}`}>
        <div className="content-wrapper">
          <h1>–¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ</h1>
          <p>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω</p>
          <div className="feature-grid">
            <div className="feature-card">
              <div className="feature-icon">üé®</div>
              <h3>–î–∏–∑–∞–π–Ω</h3>
              <p>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</p>
            </div>
            <div className="feature-card">
              <div className="feature-icon">üì±</div>
              <h3>–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>
              <p>–û—Ç–∑—ã–≤—á–∏–≤—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤</p>
            </div>
            <div className="feature-card">
              <div className="feature-icon">‚ö°</div>
              <h3>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h3>
              <p>–ë—ã—Å—Ç—Ä–∞—è –∏ –ø–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è</p>
            </div>
          </div>
        </div>
      </div>

      {/* –û–≤–µ—Ä–ª–µ–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
      {isPanelOpen && (
        <div 
          className="panel-overlay"
          onClick={togglePanel}
          aria-hidden="true"
        />
      )}
    </div>
  );
};

export default TestWindow; 