import React from 'react';
import CardSelector from './CardSelector';
import FlopRangeSelector from './FlopRangeSelector';

interface Card {
  rank: string;
  suit: string;
  display: string;
}

interface FlopRange {
  high: string[];
  middle: string[];
  low: string[];
}

interface BoardSettingsProps {
  settings: {
    flopSettings: {
      random: boolean;
      twoTone: boolean;
      rainbow: boolean;
      monotone: boolean;
      paired: boolean;
      specific: boolean;
      specificCards: Card[];
      ranges: boolean;
      rangeSettings: FlopRange;
    };
    turnSettings: {
      enabled: boolean;
      specific: boolean;
      specificCard: Card | null;
    };
    riverSettings: {
      enabled: boolean;
      specific: boolean;
      specificCard: Card | null;
    };
  };
  onChange: (newSettings: any) => void;
}

const BoardSettings: React.FC<BoardSettingsProps> = ({ settings, onChange }) => {
  const handleFlopSettingChange = (setting: string, value: boolean) => {
    const newFlopSettings = { ...settings.flopSettings };
    
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –æ—Ç–∫–ª—é—á–∞–µ–º "random"
    if (setting !== 'random' && value) {
      newFlopSettings.random = false;
    }
    
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–∞–µ–º "random", –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    if (setting === 'random' && value) {
      Object.keys(newFlopSettings).forEach(key => {
        if (key !== 'random' && key !== 'specificCards' && key !== 'rangeSettings') {
          (newFlopSettings as any)[key] = false;
        }
      });
    }
    
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–∞–µ–º "specific" –∏–ª–∏ "ranges", –æ—Ç–∫–ª—é—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Ñ–ª–æ–ø–æ–≤
    if ((setting === 'specific' || setting === 'ranges') && value) {
      newFlopSettings.random = false;
      newFlopSettings.twoTone = false;
      newFlopSettings.rainbow = false;
      newFlopSettings.monotone = false;
      newFlopSettings.paired = false;
      
      // –û—Ç–∫–ª—é—á–∞–µ–º –¥—Ä—É–≥—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–ø—Ü–∏—é
      if (setting === 'specific') {
        newFlopSettings.ranges = false;
      } else if (setting === 'ranges') {
        newFlopSettings.specific = false;
      }
    }
    
    newFlopSettings[setting as keyof typeof newFlopSettings] = value as any;
    
    onChange({
      ...settings,
      flopSettings: newFlopSettings
    });
  };

  const handleSpecificFlopCardsChange = (cards: Card[]) => {
    onChange({
      ...settings,
      flopSettings: {
        ...settings.flopSettings,
        specificCards: cards
      }
    });
  };

  const handleFlopRangeChange = (ranges: FlopRange) => {
    onChange({
      ...settings,
      flopSettings: {
        ...settings.flopSettings,
        rangeSettings: ranges
      }
    });
  };

  const handleTurnSettingChange = (setting: string, value: any) => {
    onChange({
      ...settings,
      turnSettings: {
        ...settings.turnSettings,
        [setting]: value
      }
    });
  };

  const handleTurnCardChange = (cards: Card[]) => {
    onChange({
      ...settings,
      turnSettings: {
        ...settings.turnSettings,
        specificCard: cards.length > 0 ? cards[0] : null
      }
    });
  };

  const handleRiverSettingChange = (setting: string, value: any) => {
    onChange({
      ...settings,
      riverSettings: {
        ...settings.riverSettings,
        [setting]: value
      }
    });
  };

  const handleRiverCardChange = (cards: Card[]) => {
    onChange({
      ...settings,
      riverSettings: {
        ...settings.riverSettings,
        specificCard: cards.length > 0 ? cards[0] : null
      }
    });
  };

  const flopOptions = [
    { key: 'random', label: '–°–ª—É—á–∞–π–Ω—ã–π —Ñ–ª–æ–ø', description: '–õ—é–±—ã–µ —Ç—Ä–∏ –∫–∞—Ä—Ç—ã' },
    { key: 'twoTone', label: '–î–≤—É—Ö–º–∞—Å—Ç–Ω—ã–π', description: '–î–≤–µ –∫–∞—Ä—Ç—ã –æ–¥–Ω–æ–π –º–∞—Å—Ç–∏ + –æ–¥–Ω–∞ –¥—Ä—É–≥–æ–π' },
    { key: 'rainbow', label: '–†–∞–¥—É–≥–∞', description: '–¢—Ä–∏ –∫–∞—Ä—Ç—ã —Ä–∞–∑–Ω—ã—Ö –º–∞—Å—Ç–µ–π' },
    { key: 'monotone', label: '–ú–æ–Ω–æ—Ç–æ–Ω–Ω—ã–π', description: '–¢—Ä–∏ –∫–∞—Ä—Ç—ã –æ–¥–Ω–æ–π –º–∞—Å—Ç–∏' },
    { key: 'paired', label: '–°–ø–∞—Ä–µ–Ω–Ω—ã–π', description: '–î–≤–µ –∫–∞—Ä—Ç—ã –æ–¥–Ω–æ–≥–æ –Ω–æ–º–∏–Ω–∞–ª–∞' },
    { key: 'specific', label: '–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã', description: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã —Ñ–ª–æ–ø–∞' },
    { key: 'ranges', label: '–î–∏–∞–ø–∞–∑–æ–Ω—ã –∫–∞—Ä—Ç', description: '–ó–∞–¥–∞–π—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –≤—ã—Å–æ–∫–æ–π, —Å—Ä–µ–¥–Ω–µ–π –∏ –Ω–∏–∑–∫–æ–π –∫–∞—Ä—Ç—ã' }
  ];

  return (
    <div className="board-settings">
      <div className="street-settings">
        <h3>üÉè –§–ª–æ–ø</h3>
        <div className="checkbox-group">
          {flopOptions.map(option => (
            <div key={option.key} className="checkbox-item">
              <input
                type="checkbox"
                id={`flop-${option.key}`}
                checked={settings.flopSettings[option.key as keyof typeof settings.flopSettings] as boolean}
                onChange={(e) => handleFlopSettingChange(option.key, e.target.checked)}
              />
              <label htmlFor={`flop-${option.key}`} title={option.description}>
                {option.label}
              </label>
            </div>
          ))}
        </div>
        
        {settings.flopSettings.specific && (
          <div style={{ marginTop: '20px' }}>
            <CardSelector
              selectedCards={settings.flopSettings.specificCards || []}
              onChange={handleSpecificFlopCardsChange}
              maxCards={3}
              label="üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—ã —Ñ–ª–æ–ø–∞"
            />
          </div>
        )}

        {settings.flopSettings.ranges && (
          <div style={{ marginTop: '20px' }}>
            <FlopRangeSelector
              selectedRanges={settings.flopSettings.rangeSettings || { high: [], middle: [], low: [] }}
              onChange={handleFlopRangeChange}
            />
          </div>
        )}
        
        {!settings.flopSettings.specific && !settings.flopSettings.ranges && (
          <div style={{ marginTop: '15px', fontSize: '0.8rem', color: 'rgba(255,255,255,0.7)' }}>
            <p>üí° –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø—Ü–∏–π –∫—Ä–æ–º–µ "–°–ª—É—á–∞–π–Ω—ã–π"</p>
            <p>–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–ª–æ–ø–æ–≤</p>
          </div>
        )}
      </div>

      <div className="street-settings">
        <h3>üÉè –¢—ë—Ä–Ω</h3>
        <div className="checkbox-group">
          <div className="checkbox-item">
            <input
              type="checkbox"
              id="turn-enabled"
              checked={settings.turnSettings.enabled}
              onChange={(e) => handleTurnSettingChange('enabled', e.target.checked)}
            />
            <label htmlFor="turn-enabled">
              –í–∫–ª—é—á–∏—Ç—å —Ç—ë—Ä–Ω
            </label>
          </div>
          
          {settings.turnSettings.enabled && (
            <div className="checkbox-item">
              <input
                type="checkbox"
                id="turn-specific"
                checked={settings.turnSettings.specific}
                onChange={(e) => handleTurnSettingChange('specific', e.target.checked)}
              />
              <label htmlFor="turn-specific">
                –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ç—ë—Ä–Ω–∞
              </label>
            </div>
          )}
        </div>
        
        {settings.turnSettings.enabled && settings.turnSettings.specific && (
          <div style={{ marginTop: '20px' }}>
            <CardSelector
              selectedCards={settings.turnSettings.specificCard ? [settings.turnSettings.specificCard] : []}
              onChange={handleTurnCardChange}
              maxCards={1}
              label="üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É —Ç—ë—Ä–Ω–∞"
            />
          </div>
        )}
        
        {settings.turnSettings.enabled && !settings.turnSettings.specific && (
          <div style={{ marginTop: '10px', fontSize: '0.8rem', color: 'rgba(255,255,255,0.7)' }}>
            <p>üé≤ –¢—ë—Ä–Ω –±—É–¥–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–º</p>
          </div>
        )}
      </div>

      <div className="street-settings">
        <h3>üÉè –†–∏–≤–µ—Ä</h3>
        <div className="checkbox-group">
          <div className="checkbox-item">
            <input
              type="checkbox"
              id="river-enabled"
              checked={settings.riverSettings.enabled}
              onChange={(e) => handleRiverSettingChange('enabled', e.target.checked)}
            />
            <label htmlFor="river-enabled">
              –í–∫–ª—é—á–∏—Ç—å —Ä–∏–≤–µ—Ä
            </label>
          </div>
          
          {settings.riverSettings.enabled && (
            <div className="checkbox-item">
              <input
                type="checkbox"
                id="river-specific"
                checked={settings.riverSettings.specific}
                onChange={(e) => handleRiverSettingChange('specific', e.target.checked)}
              />
              <label htmlFor="river-specific">
                –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ä–∏–≤–µ—Ä–∞
              </label>
            </div>
          )}
        </div>
        
        {settings.riverSettings.enabled && settings.riverSettings.specific && (
          <div style={{ marginTop: '20px' }}>
            <CardSelector
              selectedCards={settings.riverSettings.specificCard ? [settings.riverSettings.specificCard] : []}
              onChange={handleRiverCardChange}
              maxCards={1}
              label="üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É —Ä–∏–≤–µ—Ä–∞"
            />
          </div>
        )}
        
        {settings.riverSettings.enabled && !settings.riverSettings.specific && (
          <div style={{ marginTop: '10px', fontSize: '0.8rem', color: 'rgba(255,255,255,0.7)' }}>
            <p>üé≤ –†–∏–≤–µ—Ä –±—É–¥–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–º</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default BoardSettings; 