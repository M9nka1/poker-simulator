// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –∏–∑ sprite sheet
import { 
  SPRITE_DIMENSIONS, 
  SUITS_ORDER, 
  RANKS_ORDER, 
  getCardPosition 
} from './cardSprites';

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç—ã –∏–∑ sprite sheet –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –∫–∞–∫ base64 —Å—Ç—Ä–æ–∫–∏
 */
export async function extractAllCards(spriteImageUrl: string): Promise<Map<string, string>> {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.crossOrigin = 'anonymous';
    
    img.onload = () => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      
      if (!ctx) {
        reject(new Error('Could not get canvas context'));
        return;
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä canvas –ø–æ–¥ –æ–¥–Ω—É –∫–∞—Ä—Ç—É
      canvas.width = SPRITE_DIMENSIONS.cardWidth;
      canvas.height = SPRITE_DIMENSIONS.cardHeight;
      
      const extractedCards = new Map<string, string>();
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç—É
      SUITS_ORDER.forEach((suit) => {
        RANKS_ORDER.forEach((rank) => {
          const position = getCardPosition(suit, rank);
          
          // –û—á–∏—â–∞–µ–º canvas
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          
          // –†–∏—Å—É–µ–º –∫–∞—Ä—Ç—É –∏–∑ sprite sheet
          ctx.drawImage(
            img,
            position.x, position.y, position.width, position.height,  // –∏—Å—Ç–æ—á–Ω–∏–∫
            0, 0, canvas.width, canvas.height  // –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
          );
          
          // –ü–æ–ª—É—á–∞–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
          const cardKey = `${rank}_${suit}`;
          const cardDataUrl = canvas.toDataURL('image/png', 1.0);
          extractedCards.set(cardKey, cardDataUrl);
          
          console.log(`Extracted card: ${cardKey}`);
        });
      });
      
      resolve(extractedCards);
    };
    
    img.onerror = () => {
      reject(new Error('Failed to load sprite image'));
    };
    
    img.src = spriteImageUrl;
  });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –∫–∞—Ä—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Ö –∫–∞–∫ .png —Ñ–∞–π–ª—ã
 */
export async function downloadExtractedCards(spriteImageUrl: string): Promise<void> {
  try {
    const extractedCards = await extractAllCards(spriteImageUrl);
    
    // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
    extractedCards.forEach((dataUrl, cardKey) => {
      downloadImageAsFile(dataUrl, `${cardKey}.png`);
    });
    
    console.log(`Successfully extracted and downloaded ${extractedCards.size} cards`);
  } catch (error) {
    console.error('Error extracting cards:', error);
    throw error;
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ —Ñ–∞–π–ª–∞
 */
function downloadImageAsFile(dataUrl: string, filename: string): void {
  const link = document.createElement('a');
  link.download = filename;
  link.href = dataUrl;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤ —Å–æ –≤—Å–µ–º–∏ –∫–∞—Ä—Ç–∞–º–∏ (—Ç—Ä–µ–±—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É JSZip)
 * –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ JSZip —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
 */
export async function createCardsZip(spriteImageUrl: string): Promise<Blob> {
  // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ JSZip
  // npm install jszip @types/jszip
  
  try {
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç JSZip —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    let jsZipModule = null;
    try {
      // @ts-ignore - JSZip —è–≤–ª—è–µ—Ç—Å—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é
      jsZipModule = await import('jszip');
    } catch (error) {
      console.warn('JSZip not available:', error);
      jsZipModule = null;
    }
    
    if (!jsZipModule) {
      throw new Error('JSZip library not installed. Run: npm install jszip @types/jszip');
    }
    
    const JSZip = jsZipModule.default;
    const zip = new JSZip();
    
    const extractedCards = await extractAllCards(spriteImageUrl);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç—É –≤ ZIP
    extractedCards.forEach((dataUrl, cardKey) => {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º dataUrl –≤ blob
      const base64Data = dataUrl.split(',')[1];
      zip.file(`${cardKey}.png`, base64Data, { base64: true });
    });
    
    // –°–æ–∑–¥–∞–µ–º ZIP —Ñ–∞–π–ª
    const zipBlob = await zip.generateAsync({ type: 'blob' });
    return zipBlob;
    
  } catch (error) {
    console.error('JSZip not available. Install it with: npm install jszip @types/jszip');
    throw new Error(`JSZip library required for ZIP creation: ${error}`);
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ —Å –∫–∞—Ä—Ç–∞–º–∏, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ –º–∞—Å—Ç—è–º
 */
export async function extractCardsToStructure(spriteImageUrl: string): Promise<{
  hearts: Map<string, string>;
  spades: Map<string, string>;
  diamonds: Map<string, string>;
  clubs: Map<string, string>;
}> {
  const allCards = await extractAllCards(spriteImageUrl);
  
  const structure = {
    hearts: new Map<string, string>(),
    spades: new Map<string, string>(),
    diamonds: new Map<string, string>(),
    clubs: new Map<string, string>()
  };
  
  allCards.forEach((dataUrl, cardKey) => {
    const [rank, suit] = cardKey.split('_');
    structure[suit as keyof typeof structure].set(rank, dataUrl);
  });
  
  return structure;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSS —Å–ø—Ä–∞–π—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö
 */
export function generateCSSSprite(): string {
  let css = '/* Generated CSS Sprite for Playing Cards */\n\n';
  css += '.card-sprite {\n';
  css += `  background-image: url('../assets/cards-sprite.png');\n`;
  css += `  background-size: ${SPRITE_DIMENSIONS.totalWidth}px ${SPRITE_DIMENSIONS.totalHeight}px;\n`;
  css += '  background-repeat: no-repeat;\n';
  css += '  display: inline-block;\n';
  css += '}\n\n';
  
  SUITS_ORDER.forEach((suit) => {
    RANKS_ORDER.forEach((rank) => {
      const position = getCardPosition(suit, rank);
      const className = `.card-${rank.toLowerCase()}-${suit}`;
      
      css += `${className} {\n`;
      css += `  background-position: -${position.x}px -${position.y}px;\n`;
      css += `  width: ${SPRITE_DIMENSIONS.cardWidth}px;\n`;
      css += `  height: ${SPRITE_DIMENSIONS.cardHeight}px;\n`;
      css += '}\n\n';
    });
  });
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º CSS –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  console.log('Generated CSS sprite classes');
  return css;
}

/**
 * –î–µ–º–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
 */
export async function runExtractionDemo(spriteImageUrl: string): Promise<void> {
  console.log('üé¥ Starting card extraction demo...');
  
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã
    const cards = await extractAllCards(spriteImageUrl);
    console.log(`‚úÖ Successfully extracted ${cards.size} cards`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const sampleCards = Array.from(cards.entries()).slice(0, 5);
    console.log('üîç Sample cards:');
    sampleCards.forEach(([key, dataUrl]) => {
      console.log(`  ${key}: ${dataUrl.substring(0, 50)}...`);
    });
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSS —Å–ø—Ä–∞–π—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    generateCSSSprite();
    
    return;
  } catch (error) {
    console.error('‚ùå Error in extraction demo:', error);
    throw error;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∫–∞–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
const cardExtractor = {
  extractAllCards,
  downloadExtractedCards,
  createCardsZip,
  extractCardsToStructure,
  generateCSSSprite,
  runExtractionDemo
};

export default cardExtractor; 