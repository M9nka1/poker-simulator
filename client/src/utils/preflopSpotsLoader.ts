interface PreflopSpot {
  id: string;
  name: string;
  description: string;
  potSize: number;
  blinds: { small: number; big: number };
  actions: Array<{ player: string; action: string; amount: number }>;
  handHistoryText?: string; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
}

class PreflopSpotsLoader {
  private spots: PreflopSpot[] = [];

  // –ü–∞—Ä—Å–∏–Ω–≥ hand history —Ç–µ–∫—Å—Ç–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  private parseHandHistory(filename: string, content: string): PreflopSpot {
    const lines = content.split('\n').map(line => line.trim()).filter(line => line);
    
    let potSize = 0;
    let blinds = { small: 0, big: 0 };
    let actions: Array<{ player: string; action: string; amount: number }> = [];
    let inPreflop = false;
    let playerBets: { [key: string]: number } = {};

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ filename (—É–±–∏—Ä–∞–µ–º .txt –∏ –∑–∞–º–µ–Ω—è–µ–º _ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã)
    const name = filename.replace('.txt', '').replace(/_/g, ' ');
    
    for (const line of lines) {
      // –ü–∞—Ä—Å–∏–º –±–ª–∞–π–Ω–¥—ã
      const blindMatch = line.match(/(.+): posts (small blind|big blind) [$‚Ç¨](\d+(?:\.\d+)?)/);
      if (blindMatch) {
        const player = blindMatch[1];
        const blindType = blindMatch[2];
        const amount = parseFloat(blindMatch[3]);
        
        if (blindType === 'small blind') {
          blinds.small = amount;
        } else if (blindType === 'big blind') {
          blinds.big = amount;
        }
        
        playerBets[player] = amount;
        actions.push({
          player,
          action: blindType,
          amount
        });
        continue;
      }

      // –ù–∞—á–∞–ª–æ –ø—Ä–µ—Ñ–ª–æ–ø –¥–µ–π—Å—Ç–≤–∏–π
      if (line.includes('*** HOLE CARDS ***')) {
        inPreflop = true;
        continue;
      }

      // –ö–æ–Ω–µ—Ü –ø—Ä–µ—Ñ–ª–æ–ø–∞
      if (line.includes('*** FLOP ***')) {
        break;
      }

      if (inPreflop) {
        // –ü–∞—Ä—Å–∏–º fold
        const foldMatch = line.match(/(.+): folds/);
        if (foldMatch) {
          actions.push({
            player: foldMatch[1],
            action: 'fold',
            amount: 0
          });
          continue;
        }

        // –ü–∞—Ä—Å–∏–º raises —Å "to" (–Ω–∞–ø—Ä–∏–º–µ—Ä: raises $15.00 to $25.00)
        const raiseToMatch = line.match(/(.+): raises [$‚Ç¨](\d+(?:\.\d+)?) to [$‚Ç¨](\d+(?:\.\d+)?)/);
        if (raiseToMatch) {
          const player = raiseToMatch[1];
          const totalBet = parseFloat(raiseToMatch[3]);
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
          let actionType = 'raise';
          if (actions.filter(a => a.action === 'raise' || a.action === '3bet' || a.action === '4bet').length === 1) {
            actionType = '3bet';
          } else if (actions.filter(a => a.action === 'raise' || a.action === '3bet' || a.action === '4bet').length === 2) {
            actionType = '4bet';
          }
          
          playerBets[player] = totalBet;
          actions.push({
            player,
            action: actionType,
            amount: totalBet
          });
          continue;
        }

        // –ü–∞—Ä—Å–∏–º calls
        const callMatch = line.match(/(.+): calls [$‚Ç¨](\d+(?:\.\d+)?)/);
        if (callMatch) {
          const player = callMatch[1];
          const amount = parseFloat(callMatch[2]);
          const previousBet = playerBets[player] || 0;
          
          playerBets[player] = previousBet + amount;
          actions.push({
            player,
            action: 'call',
            amount: amount
          });
          continue;
        }
      }
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –±–∞–Ω–∫–∞ –Ω–∞ —Ñ–ª–æ–ø–µ
    potSize = Object.values(playerBets).reduce((sum, bet) => sum + bet, 0);

    return {
      id: filename.replace('.txt', '').toLowerCase().replace(/\s+/g, '-'),
      name,
      description: `–ü—Ä–µ—Ñ–ª–æ–ø —Å–ø–æ—Ç: ${name}`,
      potSize,
      blinds,
      actions,
      handHistoryText: content
    };
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö TXT —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏
  async loadSpotsFromFolder(): Promise<PreflopSpot[]> {
    this.spots = [];

    try {
      // –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö TXT —Ñ–∞–π–ª–æ–≤
      const knownFiles = [
        'BTN_vs_BB_3bet.txt',
        'CO_vs_BTN_4bet.txt', 
        '3bet_SBvsBU.txt'
      ];
      
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º TXT —Ñ–∞–π–ª—ã:', knownFiles);
      
      for (const filename of knownFiles) {
        try {
          const response = await fetch(`/preflop-spots/${filename}`);
          if (response.ok) {
            const content = await response.text();
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª ${filename}, —Ä–∞–∑–º–µ—Ä: ${content.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            const spot = this.parseHandHistory(filename, content);
            console.log(`üìä –ü–∞—Ä—Å–∏–Ω–≥ ${filename}:`, {
              potSize: spot.potSize,
              blinds: spot.blinds,
              actionsCount: spot.actions.length,
              players: spot.actions.map(a => a.player)
            });
            this.spots.push(spot);
          } else {
            console.warn(`‚ö†Ô∏è –§–∞–π–ª ${filename} –Ω–µ –Ω–∞–π–¥–µ–Ω (${response.status})`);
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${filename}:`, error);
        }
      }

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.spots.length} –ø—Ä–µ—Ñ–ª–æ–ø —Å–ø–æ—Ç–æ–≤ –∏–∑ TXT —Ñ–∞–π–ª–æ–≤`);
      return this.spots;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ—Ñ–ª–æ–ø —Å–ø–æ—Ç–æ–≤:', error);
      // Fallback –Ω–∞ spots.json
      return this.loadFromJson();
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–ø–æ—Ç—ã
  getSpots(): PreflopSpot[] {
    return this.spots;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–æ—Ç –ø–æ ID
  getSpotById(id: string): PreflopSpot | null {
    return this.spots.find(spot => spot.id === id) || null;
  }

  // Fallback –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ JSON
  private async loadFromJson(): Promise<PreflopSpot[]> {
    try {
      const spotsModule = await import('../data/preflop-spots/spots.json');
      return spotsModule.default || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ spots.json:', error);
      return [];
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const preflopSpotsLoader = new PreflopSpotsLoader();

export type { PreflopSpot };
export { preflopSpotsLoader };
export default preflopSpotsLoader; 