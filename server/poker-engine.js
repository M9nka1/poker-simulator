class PokerEngine {
  constructor(boardSettings, handRanges, preflopHistory = null) {
    this.boardSettings = boardSettings;
    this.handRanges = handRanges;
    this.preflopHistory = preflopHistory;
    this.deck = this.createDeck();
  }

  createDeck() {
    const suits = ['h', 'd', 'c', 's']; // hearts, diamonds, clubs, spades
    const ranks = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];
    const deck = [];
    
    for (const suit of suits) {
      for (const rank of ranks) {
        deck.push({ rank, suit, display: rank + suit });
      }
    }
    
    return deck;
  }

  shuffleDeck(deck) {
    const shuffled = [...deck];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }

  generateHoleCards(handRanges) {
    const player1Range = handRanges.player1 || [];
    const player2Range = handRanges.player2 || [];
    
    // –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø—É—Å—Ç—ã–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
    if (player1Range.length === 0 && player2Range.length === 0) {
      return this.generateRandomHoleCards();
    }
    
    // Convert matrix selections to actual hands
    const player1Hands = this.expandHandRange(player1Range);
    const player2Hands = this.expandHandRange(player2Range);
    
    // –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –ø—É—Å—Ç–æ–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç—ã
    if (player1Hands.length === 0 || player2Hands.length === 0) {
      return this.generateRandomHoleCards();
    }
    
    // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ä—É–∫–∏ (–±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –∫–∞—Ä—Ç)
    let attempts = 0;
    const maxAttempts = 1000;
    
    while (attempts < maxAttempts) {
      const player1Hand = player1Hands[Math.floor(Math.random() * player1Hands.length)];
      const player2Hand = player2Hands[Math.floor(Math.random() * player2Hands.length)];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è
      const player1Cards = player1Hand.map(card => card.display);
      const player2Cards = player2Hand.map(card => card.display);
      const hasConflict = player1Cards.some(card => player2Cards.includes(card));
      
      if (!hasConflict) {
        return {
          player1: player1Hand,
          player2: player2Hand
        };
      }
      
      attempts++;
    }
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ä—É–∫–∏, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ
    console.warn('‚ö†Ô∏è Could not find compatible hands from ranges, generating random cards');
    return this.generateRandomHoleCards();
  }

  generateRandomHoleCards() {
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—É—é –∫–æ–ª–æ–¥—É
    const shuffledDeck = this.shuffleDeck(this.deck);
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4 –∫–∞—Ä—Ç—ã –¥–ª—è –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤
    const player1Hand = [shuffledDeck[0], shuffledDeck[1]];
    const player2Hand = [shuffledDeck[2], shuffledDeck[3]];
    
    return {
      player1: player1Hand,
      player2: player2Hand
    };
  }

  expandHandRange(rangeSelection) {
    // Convert matrix selection to actual card combinations
    const hands = [];
    const suits = ['h', 'd', 'c', 's'];
    
    rangeSelection.forEach(handString => {
      if (handString.includes('s')) {
        // Suited hand
        const ranks = handString.replace('s', '');
        for (const suit of suits) {
          hands.push([
            { rank: ranks[0], suit, display: ranks[0] + suit },
            { rank: ranks[1], suit, display: ranks[1] + suit }
          ]);
        }
      } else if (handString.includes('o')) {
        // Offsuit hand
        const ranks = handString.replace('o', '');
        for (let i = 0; i < suits.length; i++) {
          for (let j = 0; j < suits.length; j++) {
            if (i !== j) {
              hands.push([
                { rank: ranks[0], suit: suits[i], display: ranks[0] + suits[i] },
                { rank: ranks[1], suit: suits[j], display: ranks[1] + suits[j] }
              ]);
            }
          }
        }
      } else if (handString.length === 2) {
        // Pocket pair
        const rank = handString[0];
        for (let i = 0; i < suits.length; i++) {
          for (let j = i + 1; j < suits.length; j++) {
            hands.push([
              { rank, suit: suits[i], display: rank + suits[i] },
              { rank, suit: suits[j], display: rank + suits[j] }
            ]);
          }
        }
      }
    });
    
    return hands;
  }

  generateBoard(holeCards = null) {
    const { flopSettings, turnSettings, riverSettings } = this.boardSettings;
    let availableDeck = this.shuffleDeck(this.deck);
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∫–æ–ª–æ–¥—ã
    if (holeCards) {
      const usedCards = [];
      if (holeCards.player1) usedCards.push(...holeCards.player1);
      if (holeCards.player2) usedCards.push(...holeCards.player2);
      
      availableDeck = availableDeck.filter(card => 
        !usedCards.some(usedCard => usedCard.display === card.display)
      );
    }
    
    const board = [];
    
    // Generate flop
    const flop = this.generateFlop(availableDeck, flopSettings);
    board.push(...flop);
    availableDeck = availableDeck.filter(card => 
      !flop.some(flopCard => flopCard.display === card.display)
    );
    
    // Generate turn
    if (turnSettings && turnSettings.enabled) {
      const turn = this.generateTurn(availableDeck, turnSettings, board);
      board.push(turn);
      availableDeck = availableDeck.filter(card => card.display !== turn.display);
    }
    
    // Generate river
    if (riverSettings && riverSettings.enabled) {
      const river = this.generateRiver(availableDeck, riverSettings, board);
      board.push(river);
    }
    
    return board;
  }

  generateFlop(deck, settings) {
    console.log('üé≤ Generating flop with settings:', JSON.stringify(settings, null, 2));
    
    if (settings.specific && settings.specificCards && settings.specificCards.length === 3) {
      // –§–∏–ª—å—Ç—Ä—É–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–∞—Ä—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
      const validCards = settings.specificCards.filter(card => card && card.rank && card.suit);
      if (validCards.length === 3) {
        console.log('üéØ Using specific cards:', validCards);
        return validCards;
      }
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å ranges, –Ω–æ —Ç–∞–∫–∂–µ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    if (settings.ranges && settings.rangeSettings && (settings.twoTone || settings.rainbow || settings.monotone || settings.paired || settings.unpaired || settings.trips)) {
      console.log('üîÑ Using complex generation with ranges + constraints');
      return this.generateComplexFlop(deck, settings);
    }

    // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ ranges –±–µ–∑ –¥—Ä—É–≥–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    if (settings.ranges && settings.rangeSettings && !settings.twoTone && !settings.rainbow && !settings.monotone && !settings.paired && !settings.unpaired && !settings.trips) {
      console.log('üìä Using range settings only:', settings.rangeSettings);
      return this.generateFlopByRanges(deck, settings.rangeSettings);
    }
    
    // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    let candidates = [...deck];
    
    if (settings.twoTone) {
      console.log('üé® Generating two-tone flop');
      // Two cards of same suit, one different
      const suits = ['h', 'd', 'c', 's'];
      const mainSuit = suits[Math.floor(Math.random() * suits.length)];
      const suitedCards = candidates.filter(card => card.suit === mainSuit);
      const offsuitCards = candidates.filter(card => card.suit !== mainSuit);
      
      if (suitedCards.length >= 2 && offsuitCards.length >= 1) {
        const card1 = suitedCards[Math.floor(Math.random() * suitedCards.length)];
        const card2 = suitedCards.filter(c => c.display !== card1.display)[Math.floor(Math.random() * (suitedCards.length - 1))];
        const card3 = offsuitCards[Math.floor(Math.random() * offsuitCards.length)];
        const result = this.shuffleArray([card1, card2, card3]);
        console.log('üé® Two-tone flop generated:', result);
        return result;
      }
    }
    
    if (settings.rainbow) {
      console.log('üåà Generating rainbow flop');
      // Three different suits
      const suits = ['h', 'd', 'c', 's'];
      const selectedSuits = this.shuffleArray(suits).slice(0, 3);
      const flop = [];
      
      for (const suit of selectedSuits) {
        const suitCards = candidates.filter(card => card.suit === suit);
        if (suitCards.length > 0) {
          flop.push(suitCards[Math.floor(Math.random() * suitCards.length)]);
          candidates = candidates.filter(card => card.display !== flop[flop.length - 1].display);
        }
      }
      
      if (flop.length === 3) {
        console.log('üåà Rainbow flop generated:', flop);
        return flop;
      } else {
        console.log('‚ö†Ô∏è Failed to generate rainbow flop, using random');
        return this.getRandomCards(deck, 3);
      }
    }
    
    if (settings.monotone) {
      console.log('üîµ Generating monotone flop');
      // Three cards of same suit
      const suits = ['h', 'd', 'c', 's'];
      const suit = suits[Math.floor(Math.random() * suits.length)];
      const suitedCards = candidates.filter(card => card.suit === suit);
      
      if (suitedCards.length >= 3) {
        const result = this.shuffleArray(suitedCards).slice(0, 3);
        console.log('üîµ Monotone flop generated:', result);
        return result;
      }
    }
    
    if (settings.unpaired) {
      console.log('üö´ Generating unpaired flop');
      // Three cards of different ranks
      const ranks = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];
      const selectedRanks = this.shuffleArray(ranks).slice(0, 3);
      const flop = [];
      
      for (const rank of selectedRanks) {
        const rankCards = candidates.filter(card => card.rank === rank);
        if (rankCards.length > 0) {
          flop.push(rankCards[Math.floor(Math.random() * rankCards.length)]);
          candidates = candidates.filter(card => card.display !== flop[flop.length - 1].display);
        }
      }
      
      if (flop.length === 3) {
        console.log('üö´ Unpaired flop generated:', flop);
        return flop;
      } else {
        console.log('‚ö†Ô∏è Failed to generate unpaired flop, using random');
        return this.getRandomCards(deck, 3);
      }
    }
    
    if (settings.paired) {
      console.log('üë´ Generating paired flop');
      // Two cards of same rank
      const ranks = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];
      const rank = ranks[Math.floor(Math.random() * ranks.length)];
      const rankCards = candidates.filter(card => card.rank === rank);
      
      if (rankCards.length >= 2) {
        const pair = this.shuffleArray(rankCards).slice(0, 2);
        const remaining = candidates.filter(card => card.rank !== rank);
        const thirdCard = remaining[Math.floor(Math.random() * remaining.length)];
        const result = this.shuffleArray([...pair, thirdCard]);
        console.log('üë´ Paired flop generated:', result);
        return result;
      }
    }
    
    if (settings.trips) {
      console.log('üéØ Generating trips flop');
      // Three cards of same rank
      const ranks = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];
      const rank = ranks[Math.floor(Math.random() * ranks.length)];
      const rankCards = candidates.filter(card => card.rank === rank);
      
      if (rankCards.length >= 3) {
        const result = this.shuffleArray(rankCards).slice(0, 3);
        console.log('üéØ Trips flop generated:', result);
        return result;
      }
    }
    
    // Default: random flop
    console.log('üé≤ Generating random flop (default)');
    const result = this.getRandomCards(deck, 3);
    console.log('üé≤ Random flop generated:', result);
    return result;
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
  generateComplexFlop(deck, settings) {
    console.log('üîÑ Complex flop generation started');
    const { rangeSettings } = settings;
    const maxAttempts = 1000;
    let attempts = 0;

    while (attempts < maxAttempts) {
      attempts++;
      let candidates = [...deck];
      const flop = [];
      const usedCards = [];

      try {
        // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å—Ç–∞—Ä—à–∏–Ω—Å—Ç–≤–∞ –∫–∞—Ä—Ç
        if (rangeSettings) {
          const { high, middle, low } = rangeSettings;
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã—Å–æ–∫—É—é –∫–∞—Ä—Ç—É
          if (high && high.length > 0) {
            const highCards = candidates.filter(card => high.includes(card.rank));
            if (highCards.length === 0) continue;
            
            const highCard = highCards[Math.floor(Math.random() * highCards.length)];
            flop.push(highCard);
            usedCards.push(highCard);
            candidates = candidates.filter(card => card.display !== highCard.display);
          }

          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ä–µ–¥–Ω—é—é –∫–∞—Ä—Ç—É  
          if (middle && middle.length > 0) {
            const middleCards = candidates.filter(card => middle.includes(card.rank));
            if (middleCards.length === 0) continue;
            
            const middleCard = middleCards[Math.floor(Math.random() * middleCards.length)];
            flop.push(middleCard);
            usedCards.push(middleCard);
            candidates = candidates.filter(card => card.display !== middleCard.display);
          }

          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∏–∑–∫—É—é –∫–∞—Ä—Ç—É
          if (low && low.length > 0) {
            const lowCards = candidates.filter(card => low.includes(card.rank));
            if (lowCards.length === 0) continue;
            
            const lowCard = lowCards[Math.floor(Math.random() * lowCards.length)];
            flop.push(lowCard);
            usedCards.push(lowCard);
            candidates = candidates.filter(card => card.display !== lowCard.display);
          }
        }

        // –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–∞—Ä—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ
        while (flop.length < 3) {
          if (candidates.length === 0) break;
          const randomCard = candidates[Math.floor(Math.random() * candidates.length)];
          flop.push(randomCard);
          usedCards.push(randomCard);
          candidates = candidates.filter(card => card.display !== randomCard.display);
        }

        if (flop.length !== 3) continue;

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–ø–∞—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        const ranks = flop.map(card => card.rank);
        const uniqueRanks = [...new Set(ranks)];
        
        if (settings.paired && uniqueRanks.length !== 2) continue; // –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–∞—Ä–∞
        if (settings.unpaired && uniqueRanks.length !== 3) continue; // –í—Å–µ —Ä–∞–∑–Ω—ã–µ
        if (settings.trips && uniqueRanks.length !== 1) continue; // –í—Å–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–∞—Å—Ç–µ–π
        const suits = flop.map(card => card.suit);
        const uniqueSuits = [...new Set(suits)];
        
        if (settings.twoTone && uniqueSuits.length !== 2) continue; // –î–≤–∞ —Ü–≤–µ—Ç–∞
        if (settings.rainbow && uniqueSuits.length !== 3) continue; // –¢—Ä–∏ —Ü–≤–µ—Ç–∞  
        if (settings.monotone && uniqueSuits.length !== 1) continue; // –û–¥–∏–Ω —Ü–≤–µ—Ç

        // 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–≤—É—Ö—Ç–æ–Ω–æ–≤—ã—Ö —Ñ–ª–æ–ø–æ–≤
        if (settings.twoTone) {
          // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –∫–∞—Ä—Ç—ã –æ–¥–Ω–æ–π –º–∞—Å—Ç–∏ –∏ 1 –¥—Ä—É–≥–æ–π
          const suitCounts = {};
          suits.forEach(suit => {
            suitCounts[suit] = (suitCounts[suit] || 0) + 1;
          });
          const counts = Object.values(suitCounts);
          if (!counts.includes(2) || !counts.includes(1)) continue;
        }

        // –í—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!
        console.log(`‚úÖ Complex flop generated after ${attempts} attempts:`, flop);
        console.log('üéØ Constraints met:', {
          twoTone: settings.twoTone ? `${uniqueSuits.length} suits` : 'off',
          paired: settings.paired ? `${uniqueRanks.length} ranks` : 'off',
          ranges: rangeSettings ? 'applied' : 'off'
        });
        
        return flop;
        
      } catch (error) {
        console.log(`‚ö†Ô∏è Error in attempt ${attempts}:`, error.message);
        continue;
      }
    }

    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞ 1000 –ø–æ–ø—ã—Ç–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π range-based —Ñ–ª–æ–ø
    console.log('‚ö†Ô∏è Failed to generate complex flop, falling back to range-only generation');
    return this.generateFlopByRanges(deck, settings.rangeSettings);
  }

  generateFlopByRanges(deck, rangeSettings) {
    const { high, middle, low } = rangeSettings;
    const suits = ['h', 'd', 'c', 's'];
    const flop = [];
    const usedCards = [];

    // Helper function to get available cards for a rank
    const getAvailableCardsForRanks = (ranks) => {
      return deck.filter(card => 
        ranks.includes(card.rank) && 
        !usedCards.some(used => used.display === card.display)
      );
    };

    // Generate high card
    if (high.length > 0) {
      const availableHighCards = getAvailableCardsForRanks(high);
      if (availableHighCards.length > 0) {
        const highCard = availableHighCards[Math.floor(Math.random() * availableHighCards.length)];
        flop.push(highCard);
        usedCards.push(highCard);
      }
    }

    // Generate middle card
    if (middle.length > 0) {
      const availableMiddleCards = getAvailableCardsForRanks(middle);
      if (availableMiddleCards.length > 0) {
        const middleCard = availableMiddleCards[Math.floor(Math.random() * availableMiddleCards.length)];
        flop.push(middleCard);
        usedCards.push(middleCard);
      }
    }

    // Generate low card
    if (low.length > 0) {
      const availableLowCards = getAvailableCardsForRanks(low);
      if (availableLowCards.length > 0) {
        const lowCard = availableLowCards[Math.floor(Math.random() * availableLowCards.length)];
        flop.push(lowCard);
        usedCards.push(lowCard);
      }
    }

    // Fill remaining slots with random cards if needed
    while (flop.length < 3) {
      const availableCards = deck.filter(card => 
        !usedCards.some(used => used.display === card.display)
      );
      if (availableCards.length > 0) {
        const randomCard = availableCards[Math.floor(Math.random() * availableCards.length)];
        flop.push(randomCard);
        usedCards.push(randomCard);
      } else {
        break;
      }
    }

    // Sort flop by rank (high to low) to maintain proper order
    const rankOrder = ['A', 'K', 'Q', 'J', 'T', '9', '8', '7', '6', '5', '4', '3', '2'];
    flop.sort((a, b) => rankOrder.indexOf(a.rank) - rankOrder.indexOf(b.rank));

    return flop.length === 3 ? flop : this.getRandomCards(deck, 3);
  }

  generateTurn(deck, settings, currentBoard) {
    if (settings.specific && settings.specificCard) {
      return settings.specificCard;
    }
    
    // Filter out cards already on board
    const availableCards = deck.filter(card => 
      !currentBoard.some(boardCard => boardCard.display === card.display)
    );
    
    return availableCards[Math.floor(Math.random() * availableCards.length)];
  }

  generateRiver(deck, settings, currentBoard) {
    if (settings.specific && settings.specificCard) {
      return settings.specificCard;
    }
    
    // Filter out cards already on board
    const availableCards = deck.filter(card => 
      !currentBoard.some(boardCard => boardCard.display === card.display)
    );
    
    return availableCards[Math.floor(Math.random() * availableCards.length)];
  }

  getRandomCards(deck, count) {
    const shuffled = this.shuffleArray([...deck]);
    return shuffled.slice(0, count);
  }

  shuffleArray(array) {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }

  createTable(tableId, initialPotSize = 0, playerStacks = {}, activePlayers = [], currentPlayerInfo = null, predefinedBoard = null) {
    const holeCards = this.generateHoleCards(this.handRanges);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –±–æ—Ä–¥ –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω, –∏–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
    let board;
    if (predefinedBoard && predefinedBoard.length >= 3) {
      console.log(`üéØ Using predefined board for table ${tableId}:`, predefinedBoard.map(card => card.display).join(', '));
      board = predefinedBoard;
    } else {
      console.log(`üé≤ Generating new board for table ${tableId}`);
      board = this.generateBoard(holeCards);
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–µ–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –ø—Ä–µ—Ñ–ª–æ–ø –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const defaultStack = 1000;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã, –∏–Ω–∞—á–µ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Å—Ç–µ–∫–æ–≤
    const playerNames = activePlayers.length > 0 ? activePlayers : Object.keys(playerStacks);
    const player1Name = playerNames[0] || 'Player 1';
    const player2Name = playerNames[1] || 'Player 2';
    const player1Stack = playerStacks[player1Name] || defaultStack;
    const player2Stack = playerStacks[player2Name] || defaultStack;
    
    console.log(`üéØ Creating table with active players: ${player1Name} (${player1Stack}) vs ${player2Name} (${player2Stack})`);
    console.log(`üéÆ Current player info:`, currentPlayerInfo);
    console.log(`üí∞ Received player stacks:`, playerStacks);
    console.log(`üìã Player names from activePlayers:`, playerNames);
    console.log(`üîç Stack lookup details:`);
    console.log(`   Player 1: "${player1Name}" ‚Üí stack: ${player1Stack} (from playerStacks["${player1Name}"] = ${playerStacks[player1Name]})`);
    console.log(`   Player 2: "${player2Name}" ‚Üí stack: ${player2Stack} (from playerStacks["${player2Name}"] = ${playerStacks[player2Name]})`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∏–≥—Ä–æ–∫–µ
    let player1Position = 'BTN'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Player 1 - BTN (IP)
    let player2Position = 'BB';  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Player 2 - BB (OOP)
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è heads-up –ø–æ–∑–∏—Ü–∏–π
    // –í heads-up: BTN = SB = IP, BB = OOP
    // –ò–∑ hand history: Pio_OOP_3bet_SB –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –∏–≥—Ä–æ–∫ –Ω–∞ SB, –Ω–æ OOP –≤ –∞–Ω–∞–ª–∏–∑–µ
    // –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –≤ –∞–Ω–∞–ª–∏–∑–µ SB –∏–≥—Ä–æ–∫ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ OOP –ø–æ—Å–ª–µ 3bet
    
    if (currentPlayerInfo && currentPlayerInfo.position) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–≥—Ä–∞—Ç—å –∑–∞ IP –ø–æ–∑–∏—Ü–∏—é
      if (currentPlayerInfo.position === 'ip') {
        if (currentPlayerInfo.name === player1Name) {
          // Player 1 –∏–≥—Ä–∞–µ—Ç IP = BTN/SB
          player1Position = 'BTN';
          player2Position = 'BB';
        } else if (currentPlayerInfo.name === player2Name) {
          // Player 2 –∏–≥—Ä–∞–µ—Ç IP = BTN/SB
          player1Position = 'BB';
          player2Position = 'BTN';
        }
      } 
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–≥—Ä–∞—Ç—å –∑–∞ OOP –ø–æ–∑–∏—Ü–∏—é  
      else if (currentPlayerInfo.position === 'oop') {
        if (currentPlayerInfo.name === player1Name) {
          // Player 1 –∏–≥—Ä–∞–µ—Ç OOP = BB
          player1Position = 'BB';
          player2Position = 'BTN';
        } else if (currentPlayerInfo.name === player2Name) {
          // Player 2 –∏–≥—Ä–∞–µ—Ç OOP = BB
          player1Position = 'BB';
          player2Position = 'BTN';
        }
      }
    } else {
      // Fallback: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
      console.log(`üîç Auto-detecting positions from player names...`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∏–∫–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
      if (player1Name.includes('_SB')) {
        // SB = Small Blind = Button –≤ heads-up
        player1Position = 'BTN';
        player2Position = 'BB';
        console.log(`üìç Player 1 has _SB suffix ‚Üí BTN position`);
      } else if (player1Name.includes('_BB')) {
        // BB = Big Blind
        player1Position = 'BB';
        player2Position = 'BTN';
        console.log(`üìç Player 1 has _BB suffix ‚Üí BB position`);
      } else if (player2Name.includes('_SB')) {
        // SB = Small Blind = Button –≤ heads-up
        player1Position = 'BB';
        player2Position = 'BTN';
        console.log(`üìç Player 2 has _SB suffix ‚Üí BTN position`);
      } else if (player2Name.includes('_BB')) {
        // BB = Big Blind
        player1Position = 'BTN';
        player2Position = 'BB';
        console.log(`üìç Player 2 has _BB suffix ‚Üí BB position`);
      } else if (player1Name.includes('_OOP_')) {
        // OOP –æ–∑–Ω–∞—á–∞–µ—Ç Big Blind –≤ heads-up –ø–æ—Å—Ç—Ñ–ª–æ–ø–µ
        player1Position = 'BB';
        player2Position = 'BTN';
        console.log(`üìç Player 1 has _OOP_ ‚Üí BB position`);
      } else if (player2Name.includes('_OOP_')) {
        // OOP –æ–∑–Ω–∞—á–∞–µ—Ç Big Blind –≤ heads-up –ø–æ—Å—Ç—Ñ–ª–æ–ø–µ  
        player1Position = 'BTN';
        player2Position = 'BB';
        console.log(`üìç Player 2 has _OOP_ ‚Üí BB position`);
      } else if (player1Name.includes('_IP_') || player1Name.includes('_BTN') || player1Name.includes('_CO')) {
        // IP/BTN/CO = Button
        player1Position = 'BTN';
        player2Position = 'BB';
        console.log(`üìç Player 1 has IP/BTN/CO ‚Üí BTN position`);
      } else if (player2Name.includes('_IP_') || player2Name.includes('_BTN') || player2Name.includes('_CO')) {
        // IP/BTN/CO = Button
        player1Position = 'BB';
        player2Position = 'BTN';
        console.log(`üìç Player 2 has IP/BTN/CO ‚Üí BTN position`);
      } else {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: Player 1 = BTN, Player 2 = BB
        player1Position = 'BTN';
        player2Position = 'BB';
        console.log(`üìç Default positions: Player 1 = BTN, Player 2 = BB`);
      }
    }
    
    // –í heads-up: BB (OOP) –≤—Å–µ–≥–¥–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–≤—ã–º –Ω–∞ –ø–æ—Å—Ç—Ñ–ª–æ–ø–µ
    let currentPlayerId;
    if (player1Position === 'BB') {
      currentPlayerId = 1; // Player 1 —è–≤–ª—è–µ—Ç—Å—è BB (OOP), –æ–Ω —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
    } else {
      currentPlayerId = 2; // Player 2 —è–≤–ª—è–µ—Ç—Å—è BB (OOP), –æ–Ω —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
    }
    
    console.log(`üìç Final positions: ${player1Name} = ${player1Position}, ${player2Name} = ${player2Position}`);
    console.log(`üéØ Current player will be: ${currentPlayerId} (${currentPlayerId === 1 ? player1Name : player2Name}, ${currentPlayerId === 1 ? player1Position : player2Position})`);
    
    return {
      id: tableId,
      players: [
        {
          id: 1,
          name: player1Name,
          stack: player1Stack,
          initialStack: player1Stack, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–µ–∫
          holeCards: holeCards.player1,
          position: player1Position,
          actions: [],
          connected: false
        },
        {
          id: 2,
          name: player2Name, 
          stack: player2Stack,
          initialStack: player2Stack, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–µ–∫
          holeCards: holeCards.player2,
          position: player2Position,
          actions: [],
          connected: false
        }
      ],
      board: {
        flop: board.slice(0, 3),
        turn: board[3] || null,
        river: board[4] || null
      },
      pot: initialPotSize,
      initialPot: initialPotSize,
      currentStreet: 'flop',
      currentPlayer: currentPlayerId, // –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–≥—Ä–æ–∫ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–≤—ã–º (OOP)
      handComplete: false,
      winner: null
    };
  }

  processAction(table, playerId, action, amount = 0) {
    const player = table.players.find(p => p.id === playerId);
    if (!player) {
      throw new Error('Invalid player');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è
    this.validateAction(table, playerId, action, amount);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ actions
    let actualCost = Math.max(0, amount || 0);
    let totalBetAmount = Math.max(0, amount || 0); // –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ actions
    
    if (action === 'raise' && amount > 0) {
      // –ü—Ä–∏ raise amount - —ç—Ç–æ –¥–æ–ø–ª–∞—Ç–∞ –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–µ –Ω–∞ —É–ª–∏—Ü–µ
      // –ù–æ –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å: (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ + amount) - —É–∂–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –∏–º
      const alreadySpent = this.getStreetTotal(player, table.currentStreet);
      const maxBetOnStreet = this.getMaxBetOnStreet(table, table.currentStreet);
      const newTotalBet = maxBetOnStreet + amount;
      actualCost = Math.max(0, newTotalBet - alreadySpent);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
      if (actualCost <= 0) {
        console.warn(`‚ö†Ô∏è Invalid raise calculation: alreadySpent=${alreadySpent}, maxBetOnStreet=${maxBetOnStreet}, amount=${amount}`);
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
        actualCost = Math.min(amount, player.stack);
      }
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º actualCost —Å—Ç–µ–∫–æ–º –∏–≥—Ä–æ–∫–∞ (all-in protection)
      if (actualCost > player.stack) {
        actualCost = player.stack;
        console.log(`‚ö†Ô∏è Raise limited by stack: requested ${actualCost}, limited to ${player.stack}`);
      }
      
      totalBetAmount = actualCost; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É
    }

    const actionData = {
      player: playerId,
      action,
      amount: totalBetAmount, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É
      street: table.currentStreet,
      timestamp: Date.now()
    };

    player.actions.push(actionData);

    switch (action) {
      case 'bet':
      case 'raise':
      case 'call':
        if (actualCost > 0) {
          player.stack -= actualCost;
          table.pot += actualCost;
        }
                break;
      case 'check':
        // No money movement
        break;
      case 'fold':
        table.handComplete = true;
        table.winner = playerId === 1 ? 2 : 1;
        break;
    }

    // Switch to next player or next street
    if (!table.handComplete) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ all-in —Å–∏—Ç—É–∞—Ü–∏—è
      const isAllInSituation = this.isAllInSituation(table);
      
      if (isAllInSituation) {
        console.log(`üî• All-in situation detected! Auto-dealing remaining cards...`);
        this.dealRemainingCards(table);
      } else if (this.shouldAdvanceStreet(table)) {
        console.log(`üîÑ Advancing from ${table.currentStreet} to next street`);
        this.advanceStreet(table);
      } else {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        table.currentPlayer = table.currentPlayer === 1 ? 2 : 1;
      }
    }

    return {
      table,
      handComplete: table.handComplete,
      winner: table.winner
    };
  }

  shouldAdvanceStreet(table) {
    const player1 = table.players.find(p => p.id === 1);
    const player2 = table.players.find(p => p.id === 2);
    
    const p1Actions = player1.actions.filter(a => a.street === table.currentStreet);
    const p2Actions = player2.actions.filter(a => a.street === table.currentStreet);
    
    // –û–±–∞ –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –∏ —Ç–æ—Ä–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç—ã
    if (p1Actions.length === 0 || p2Actions.length === 0) {
      return false;
    }
    
    return this.isBettingClosed(table);
  }

  isBettingClosed(table) {
    const player1 = table.players.find(p => p.id === 1);
    const player2 = table.players.find(p => p.id === 2);
    
    const p1Actions = player1.actions.filter(a => a.street === table.currentStreet);
    const p2Actions = player2.actions.filter(a => a.street === table.currentStreet);
    
    console.log(`üîç Checking betting closed on ${table.currentStreet}:`);
    console.log(`   P1 actions: ${p1Actions.map(a => `${a.action}(${a.amount})`).join(', ')}`);
    console.log(`   P2 actions: ${p2Actions.map(a => `${a.action}(${a.amount})`).join(', ')}`);
    
    // –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Å—Ñ–æ–ª–¥–∏–ª, —Ç–æ—Ä–≥–∏ –∑–∞–∫—Ä—ã—Ç—ã
    if (p1Actions.some(a => a.action === 'fold') || p2Actions.some(a => a.action === 'fold')) {
      console.log(`   ‚úÖ Betting closed: someone folded`);
      return true;
    }
    
    // –û–±–∞ –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å
    if (p1Actions.length === 0 || p2Actions.length === 0) {
      console.log(`   ‚ùå Betting not closed: not all players acted`);
      return false;
    }
    
    const p1LastAction = p1Actions[p1Actions.length - 1];
    const p2LastAction = p2Actions[p2Actions.length - 1];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—ã, –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞ —ç—Ç–æ–π —É–ª–∏—Ü–µ
    const p1Total = this.getStreetTotal(player1, table.currentStreet);
    const p2Total = this.getStreetTotal(player2, table.currentStreet);
    
    console.log(`   P1 total: ‚Ç¨${p1Total}, P2 total: ‚Ç¨${p2Total}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–æ—Ä–≥–æ–≤
    
    // 1. –û–±–∞ —á–µ–∫–Ω—É–ª–∏
    if (p1LastAction.action === 'check' && p2LastAction.action === 'check') {
      console.log(`   ‚úÖ Betting closed: both checked`);
      return true;
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å bet/raise ‚Üí call
    const allActions = [...p1Actions, ...p2Actions].sort((a, b) => a.timestamp - b.timestamp);
    
    if (allActions.length >= 2) {
      const lastAction = allActions[allActions.length - 1];
      const secondLastAction = allActions[allActions.length - 2];
      
      // bet/raise ‚Üí call –æ—Ç —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
      if ((secondLastAction.action === 'bet' || secondLastAction.action === 'raise') && 
          lastAction.action === 'call' && 
          secondLastAction.player !== lastAction.player) {
        console.log(`   ‚úÖ Betting closed: ${secondLastAction.action}(${secondLastAction.amount}) ‚Üí call(${lastAction.amount})`);
        return true;
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Å—É–º–º –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
    if (p1Total === p2Total && p1Total > 0) {
      console.log(`   ‚úÖ Betting closed: equal amounts (‚Ç¨${p1Total} each)`);
      return true;
    }
    
    console.log(`   ‚ùå Betting not closed: amounts not equal or invalid sequence`);
    return false;
  }

  getLastAction(player, street) {
    const streetActions = player.actions.filter(a => a.street === street);
    return streetActions[streetActions.length - 1];
  }

  getStreetTotal(player, street) {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞–≤–∫—É –∏–≥—Ä–æ–∫–∞ –Ω–∞ —É–ª–∏—Ü–µ
    // –¢–µ–ø–µ—Ä—å –≤ actions.amount —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ä–µ–∞–ª—å–Ω–∞—è –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞
    return player.actions
      .filter(a => a.street === street && (a.action === 'bet' || a.action === 'raise' || a.action === 'call'))
      .reduce((total, action) => total + (action.amount || 0), 0);
  }

  getPlayerActualStreetTotal(player, street) {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫–æ–º –Ω–∞ —É–ª–∏—Ü–µ (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–µ–∫–∞)
    return player.actions
      .filter(a => a.street === street && (a.action === 'bet' || a.action === 'raise' || a.action === 'call'))
      .reduce((total, action) => total + (action.amount || 0), 0);
  }

  getMaxBetOnStreet(table, street) {
    // –ù–∞—Ö–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –Ω–∞ —É–ª–∏—Ü–µ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    let maxBet = 0;
    
    table.players.forEach(player => {
      const playerTotal = this.getStreetTotal(player, street);
      maxBet = Math.max(maxBet, playerTotal);
    });
    
    return maxBet;
  }

  getCallAmount(table, playerId) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –¥–æ–ø–ª–∞—Ç–∏—Ç—å –¥–ª—è –∫–æ–ª–ª–∞
    const player = table.players.find(p => p.id === playerId);
    if (!player) {
      return 0;
    }
    
    const currentMaxBet = this.getMaxBetOnStreet(table, table.currentStreet);
    const playerBetOnStreet = this.getStreetTotal(player, table.currentStreet);
    
    return Math.max(0, currentMaxBet - playerBetOnStreet);
  }

  advanceStreet(table) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ —è–≤–ª—è–µ—Ç—Å—è OOP (BB) - –æ–Ω –≤—Å–µ–≥–¥–∞ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º –Ω–∞ –Ω–æ–≤—ã—Ö —É–ª–∏—Ü–∞—Ö
    const player1 = table.players.find(p => p.id === 1);
    const player2 = table.players.find(p => p.id === 2);
    
    let oopPlayerId;
    if (player1.position === 'BB') {
      oopPlayerId = 1;
    } else {
      oopPlayerId = 2;
    }
    
    switch (table.currentStreet) {
      case 'flop':
        table.currentStreet = 'turn';
        table.currentPlayer = oopPlayerId; // OOP (BB) –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–≤—ã–º –Ω–∞ —Ç—ë—Ä–Ω–µ
        break;
      case 'turn':
        table.currentStreet = 'river';
        table.currentPlayer = oopPlayerId; // OOP (BB) –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–≤—ã–º –Ω–∞ —Ä–∏–≤–µ—Ä–µ
        break;
      case 'river':
        table.handComplete = true;
        table.winner = this.determineWinner(table);
        break;
    }
  }

  isAllInSituation(table) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ all-in —Å–∏—Ç—É–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤ –Ω–∞ —É–ª–∏—Ü–µ
    if (!this.shouldAdvanceStreet(table)) {
      return false; // –¢–æ—Ä–≥–∏ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    }

    const player1 = table.players.find(p => p.id === 1);
    const player2 = table.players.find(p => p.id === 2);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ –ø–æ—à–µ–ª all-in (—Å—Ç–µ–∫ = 0)
    const player1AllIn = player1.stack === 0;
    const player2AllIn = player2.stack === 0;

    if (player1AllIn || player2AllIn) {
      console.log(`   üî• All-in detected: P1 stack=${player1.stack}, P2 stack=${player2.stack}`);
      return true;
    }

    return false;
  }

  dealRemainingCards(table) {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–¥–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ä—Ç—ã –¥–æ —Ä–∏–≤–µ—Ä–∞
    console.log(`   üé¥ Auto-dealing from ${table.currentStreet} to river...`);
    
    while (table.currentStreet !== 'river' && !table.handComplete) {
      this.advanceStreet(table);
      console.log(`   üìã Advanced to ${table.currentStreet}`);
    }
    
    // –ü–æ—Å–ª–µ —Å–¥–∞—á–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä—É–∫—É
    if (table.currentStreet === 'river') {
      table.handComplete = true;
      table.winner = this.determineWinner(table);
      console.log(`   üèÜ Hand completed after all-in, winner: ${table.winner}`);
    }
  }

  validateAction(table, playerId, action, amount = 0) {
    console.log(`üéÆ Player ${playerId} attempting action: ${action} ${amount} on ${table.currentStreet}`);
    console.log(`   Current table state: Street=${table.currentStreet}, CurrentPlayer=${table.currentPlayer}, Pot=${table.pot}`);
    
    const player = table.players.find(p => p.id === playerId);
    console.log(`   Player positions: P1=${table.players[0].position}, P2=${table.players[1].position}`);
    
    if (!player) {
      throw new Error('Invalid player');
    }

    if (table.handComplete) {
      throw new Error('Hand is already complete');
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –∂–µ—Å—Ç–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏ —Ö–æ–¥–∞
    // –ü–æ–∑–≤–æ–ª—è–µ–º –ª—é–±–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º—É –∏–≥—Ä–æ–∫—É –¥–µ–ª–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
    if (table.currentPlayer !== playerId) {
      console.log(`‚ö†Ô∏è Turn order mismatch: Expected player ${table.currentPlayer}, but got ${playerId}`);
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º currentPlayer –Ω–∞ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
      table.currentPlayer = playerId;
      console.log(`üîÑ Auto-switched current player to ${playerId}`);
    }
    
    console.log(`‚úÖ Turn validation passed: Player ${playerId} is current player`);

    // Validate specific actions
    switch (action) {
      case 'fold':
      case 'check':
        // Always valid
        break;
      case 'call':
        // Check if there's something to call
        const callAmount = this.getCallAmount(table, playerId);
        if (callAmount <= 0) {
          throw new Error('Nothing to call');
        }
        break;
      case 'bet':
        // Check if betting is allowed (no previous bets on this street)
        const maxBetOnStreet = this.getMaxBetOnStreet(table, table.currentStreet);
        if (maxBetOnStreet > 0) {
          throw new Error('Cannot bet when there is already a bet on this street');
        }
        if (amount <= 0) {
          throw new Error('Bet amount must be greater than 0');
        }
        break;
      case 'raise':
        // Check if there's a bet to raise
        const currentMaxBet = this.getMaxBetOnStreet(table, table.currentStreet);
        if (currentMaxBet <= 0) {
          throw new Error('Cannot raise when there is no bet');
        }
        if (amount <= 0) {
          throw new Error('Raise amount must be greater than 0');
        }
        break;
      default:
        throw new Error('Invalid action');
    }
  }

  determineWinner(table) {
    const player1 = table.players.find(p => p.id === 1);
    const player2 = table.players.find(p => p.id === 2);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∏–≥—Ä–æ–∫–æ–≤ –µ—Å—Ç—å –∫–∞—Ä—Ç—ã
    if (!player1 || !player2 || !Array.isArray(player1.holeCards) || !Array.isArray(player2.holeCards)) {
      console.error('‚ùå Invalid player data or hole cards');
      return 1; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥—Ä–æ–∫–∞ 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ —Ä—É–∫–∏ (5 –∫–∞—Ä—Ç) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const allCards = [...table.board.flop];
    if (table.board.turn) allCards.push(table.board.turn);
    if (table.board.river) allCards.push(table.board.river);
    
    const player1Hand = this.evaluateHand([...player1.holeCards, ...allCards]);
    const player2Hand = this.evaluateHand([...player2.holeCards, ...allCards]);
    
    console.log(`üéØ Hand evaluation:`);
    console.log(`   Player 1: ${player1Hand.description} (strength: ${player1Hand.strength})`);
    console.log(`   Player 2: ${player2Hand.description} (strength: ${player2Hand.strength})`);
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–∏–ª—É —Ä—É–∫
    if (player1Hand.strength > player2Hand.strength) {
      return 1;
    } else if (player2Hand.strength > player1Hand.strength) {
      return 2;
    } else {
      // –ü—Ä–∏ —Ä–∞–≤–Ω–æ–π —Å–∏–ª–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∏–∫–µ—Ä—ã
      const result = this.compareKickers(player1Hand, player2Hand);
      if (result === 0) {
        console.log(`   ü§ù Tie detected - split pot`);
        return 'tie';
      }
      return result;
    }
  }

  evaluateHand(cards) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ä—Ç—ã –≤ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const ranks = cards.map(card => this.getRankValue(card.rank));
    const suits = cards.map(card => card.suit);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –∫–∞–∂–¥–æ–≥–æ —Ä–∞–Ω–≥–∞
    const rankCounts = {};
    ranks.forEach(rank => {
      rankCounts[rank] = (rankCounts[rank] || 0) + 1;
    });
    
    const counts = Object.values(rankCounts).sort((a, b) => b - a);
    const uniqueRanks = Object.keys(rankCounts).map(Number).sort((a, b) => b - a);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–µ—à
    const suitCounts = {};
    suits.forEach(suit => {
      suitCounts[suit] = (suitCounts[suit] || 0) + 1;
    });
    const isFlush = Object.values(suitCounts).some(count => count >= 5);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∏—Ç –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Å—Ç–∞—Ä—à—É—é –∫–∞—Ä—Ç—É
    const straightInfo = this.checkStraight(uniqueRanks);
    const isStraight = straightInfo.isStraight;
    const straightHigh = straightInfo.highCard;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
    if (isFlush && isStraight) {
      return { strength: 8, description: 'Straight Flush', kickers: [straightHigh] };
    } else if (counts[0] === 4) {
      // –ö–∞—Ä–µ: —Å—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞ –∫–∞—Ä–µ, –∑–∞—Ç–µ–º –∫–∏–∫–µ—Ä
      const quadRank = Object.keys(rankCounts).find(rank => rankCounts[rank] === 4);
      const kicker = uniqueRanks.find(rank => rank != quadRank);
      return { strength: 7, description: 'Four of a Kind', kickers: [parseInt(quadRank), kicker] };
    } else if (counts[0] === 3 && counts[1] === 2) {
      // –§—É–ª–ª-—Ö–∞—É—Å: —Ç—Ä–æ–π–∫–∞, –∑–∞—Ç–µ–º –ø–∞—Ä–∞
      const tripRank = Object.keys(rankCounts).find(rank => rankCounts[rank] === 3);
      const pairRank = Object.keys(rankCounts).find(rank => rankCounts[rank] === 2);
      return { strength: 6, description: 'Full House', kickers: [parseInt(tripRank), parseInt(pairRank)] };
    } else if (isFlush) {
      // –§–ª–µ—à: 5 —Å—Ç–∞—Ä—à–∏—Ö –∫–∞—Ä—Ç
      return { strength: 5, description: 'Flush', kickers: uniqueRanks.slice(0, 5) };
    } else if (isStraight) {
      // –°—Ç—Ä–∏—Ç: —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞ —Å—Ç—Ä–∏—Ç–∞
      return { strength: 4, description: 'Straight', kickers: [straightHigh] };
    } else if (counts[0] === 3) {
      // –°–µ—Ç: —Ç—Ä–æ–π–∫–∞, –∑–∞—Ç–µ–º 2 –∫–∏–∫–µ—Ä–∞
      const tripRank = Object.keys(rankCounts).find(rank => rankCounts[rank] === 3);
      const kickers = uniqueRanks.filter(rank => rank != tripRank).slice(0, 2);
      return { strength: 3, description: 'Three of a Kind', kickers: [parseInt(tripRank), ...kickers] };
    } else if (counts[0] === 2 && counts[1] === 2) {
      // –î–≤–µ –ø–∞—Ä—ã: —Å—Ç–∞—Ä—à–∞—è –ø–∞—Ä–∞, –º–ª–∞–¥—à–∞—è –ø–∞—Ä–∞, –∫–∏–∫–µ—Ä
      const pairs = Object.keys(rankCounts).filter(rank => rankCounts[rank] === 2).map(Number).sort((a, b) => b - a);
      const kicker = uniqueRanks.find(rank => !pairs.includes(rank));
      return { strength: 2, description: 'Two Pair', kickers: [...pairs, kicker] };
    } else if (counts[0] === 2) {
      // –ü–∞—Ä–∞: –ø–∞—Ä–∞, –∑–∞—Ç–µ–º 3 –∫–∏–∫–µ—Ä–∞
      const pairRank = Object.keys(rankCounts).find(rank => rankCounts[rank] === 2);
      const kickers = uniqueRanks.filter(rank => rank != pairRank).slice(0, 3);
      return { strength: 1, description: 'One Pair', kickers: [parseInt(pairRank), ...kickers] };
    } else {
      // –°—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞: 5 —Å—Ç–∞—Ä—à–∏—Ö –∫–∞—Ä—Ç
      return { strength: 0, description: 'High Card', kickers: uniqueRanks.slice(0, 5) };
    }
  }

  getRankValue(rank) {
    const rankValues = {
      '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9,
      'T': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14
    };
    return rankValues[rank] || 0;
  }

  checkStraight(ranks) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–π —Å—Ç—Ä–∏—Ç
    for (let i = 0; i < ranks.length - 4; i++) {
      if (ranks[i] - ranks[i + 4] === 4) {
        return { isStraight: true, highCard: ranks[i] };
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º A-2-3-4-5 —Å—Ç—Ä–∏—Ç (–∫–æ–ª–µ—Å–æ) - —Å—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞ 5
    if (ranks.includes(14) && ranks.includes(5) && ranks.includes(4) && ranks.includes(3) && ranks.includes(2)) {
      return { isStraight: true, highCard: 5 };
    }
    
    return { isStraight: false, highCard: null };
  }

  compareKickers(hand1, hand2) {
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∏–∫–µ—Ä—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    for (let i = 0; i < Math.min(hand1.kickers.length, hand2.kickers.length); i++) {
      if (hand1.kickers[i] > hand2.kickers[i]) {
        return 1;
      } else if (hand2.kickers[i] > hand1.kickers[i]) {
        return 2;
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –∫–∏–∫–µ—Ä—ã —Ä–∞–≤–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∏—á—å—é
    return 0;
  }

  dealNewHand(table) {
    // Reset table for new hand
    const holeCards = this.generateHoleCards(this.handRanges);
    const board = this.generateBoard(holeCards);
    
    const player1 = table.players.find(p => p.id === 1);
    const player2 = table.players.find(p => p.id === 2);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ—Ñ–ª–æ–ø –∏—Å—Ç–æ—Ä–∏—è, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–µ–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–ª–æ–ø –¥–µ–π—Å—Ç–≤–∏–π
    if (this.preflopHistory) {
      const HandHistoryGenerator = require('./hand-history.js');
      const handHistoryGenerator = new HandHistoryGenerator(this.preflopHistory);
      const remainingStacks = handHistoryGenerator.calculatePreflopStacks(this.preflopHistory);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–µ–∫–∏ –¥–æ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–ª–æ–ø –¥–µ–π—Å—Ç–≤–∏–π
      player1.stack = remainingStacks[player1.name] || player1.initialStack || 1000;
      player2.stack = remainingStacks[player2.name] || player2.initialStack || 1000;
      
      console.log(`üîÑ New hand dealt - Stacks after preflop: P1=${player1.stack}, P2=${player2.stack}`);
    } else {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–µ–∫–∏ –¥–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
      player1.stack = player1.initialStack || 1000;
      player2.stack = player2.initialStack || 1000;
      
      console.log(`üîÑ New hand dealt - Stacks reset: P1=${player1.stack}, P2=${player2.stack}`);
    }
    
    player1.holeCards = holeCards.player1;
    player2.holeCards = holeCards.player2;
    player1.actions = [];
    player2.actions = [];
    
    table.board = {
      flop: board.slice(0, 3),
      turn: board[3] || null,
      river: board[4] || null
    };
    
    table.pot = table.initialPot || 0;
    table.currentStreet = 'flop';
    table.currentPlayer = 2; // BB –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–≤—ã–º –Ω–∞ –ø–æ—Å—Ç—Ñ–ª–æ–ø–µ (OOP)
    table.handComplete = false;
    table.winner = null;
    
    return table;
  }
}

module.exports = PokerEngine; 