import React, { useState, useCallback } from 'react';
import { toast } from 'react-hot-toast';

const TestWindow: React.FC = () => {
  // ... existing state ...

  // üî• –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å—Ç–æ–ª–æ–≤
  const [useOpenTables, setUseOpenTables] = useState(false);
  const [sessionId, setSessionId] = useState<string>('');
  const [showSessionId, setShowSessionId] = useState(false);

  // ... existing functions ...

  // üî• –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å—Ç–æ–ª–æ–≤
  const createOpenSession = async () => {
    try {
      const sessionData = {
        tableCount: tableCount,
        boardSettings: {
          flopSettings: {
            specific: specificFlopEnabled,
            specificCards: specificCards.filter(card => card !== ''),
            twoTone: twoToneEnabled,
            rainbow: rainbowEnabled,
            monotone: monotoneEnabled,
            unpaired: unpairedEnabled,
            paired: pairedEnabled,
            trips: tripsEnabled,
            ranges: rangesEnabled,
            rangeSettings: {
              high: rangeSettings.high,
              middle: rangeSettings.middle,
              low: rangeSettings.low
            }
          },
          turnSettings: {
            enabled: turnEnabled
          },
          riverSettings: {
            enabled: riverEnabled
          }
        },
        handRanges: {
          player1: playerRanges.player1,
          player2: playerRanges.player2
        },
        preflopHistory: {
          actions: preflopData.actions,
          potSize: preflopData.potSize,
          players: getPlayersForPreflop(),
          playerStacks: getPlayerStacksFromSpots(),
          stacksWithCorrectNames: getStacksWithCorrectNames(),
          blinds: preflopData.blinds
        }
      };

      console.log('üèóÔ∏è Creating open session with data:', sessionData);

      const response = await fetch('/api/create-open-session', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ sessionData }),
      });

      const result = await response.json();

      if (result.success) {
        setSessionId(result.sessionId);
        setShowSessionId(true);
        
        console.log('‚úÖ Open session created:', result.sessionId);
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–∞
        result.tables.forEach((table: any) => {
          const tableUrl = `/table?sessionId=${table.sessionId}&tableId=${table.tableId}&tableStyle=open`;
          const windowName = `OpenTable_${table.sessionId}_${table.tableId}`;
          
          window.open(
            tableUrl,
            windowName,
            'width=1200,height=800,scrollbars=yes,resizable=yes'
          );
        });

        toast.success(`–°–æ–∑–¥–∞–Ω–æ ${result.tables.length} –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å—Ç–æ–ª–æ–≤! ID —Å–µ—Å—Å–∏–∏: ${result.sessionId}`);
      } else {
        console.error('‚ùå Failed to create open session:', result.error);
        toast.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: ${result.error}`);
      }
    } catch (error) {
      console.error('‚ùå Error creating open session:', error);
      toast.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å—Ç–æ–ª–æ–≤');
    }
  };

  // üî• –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–µ—Å—Å–∏–∏
  const joinOpenSessionFromClipboard = useCallback(async () => {
    try {
      const clipboardText = await navigator.clipboard.readText();
      const sessionIdMatch = clipboardText.match(/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}/);
      
      if (!sessionIdMatch) {
        toast.error('ID —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞');
        return;
      }

      const sessionId = sessionIdMatch[0];
      console.log('üîó Joining open session:', sessionId);

      const response = await fetch(`/api/open-session/${sessionId}`);
      const result = await response.json();

      if (result.success) {
        console.log('‚úÖ Found open session with tables:', result.tables.length);
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–∞ –≤ —Å–µ—Å—Å–∏–∏
        result.tables.forEach((table: any) => {
          const tableUrl = `/table?sessionId=${table.sessionId}&tableId=${table.tableId}&tableStyle=open&isGuest=true`;
          const windowName = `OpenTable_Guest_${table.sessionId}_${table.tableId}`;
          
          window.open(
            tableUrl,
            windowName,
            'width=1200,height=800,scrollbars=yes,resizable=yes'
          );
        });

        toast.success(`–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ ${result.tables.length} –æ—Ç–∫—Ä—ã—Ç—ã–º —Å—Ç–æ–ª–∞–º!`);
      } else {
        console.error('‚ùå Session not found:', result.error);
        toast.error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
    } catch (error) {
      console.error('‚ùå Error joining open session:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏');
    }
  }, []);

  // ... existing functions ...

  return (
    <div className="test-window">
      {/* ... existing content ... */}

      {/* üî• –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ */}
      <div className="architecture-selector">
        <h3>üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å—Ç–æ–ª–æ–≤</h3>
        <div className="toggle-switch">
          <label>
            <input
              type="checkbox"
              checked={useOpenTables}
              onChange={(e) => setUseOpenTables(e.target.checked)}
            />
            <span className="slider"></span>
          </label>
          <span className="toggle-label">
            {useOpenTables ? 'üÜï –û—Ç–∫—Ä—ã—Ç—ã–µ —Å—Ç–æ–ª—ã' : 'üîí –°–∏—Å—Ç–µ–º–∞ —Ö–æ—Å—Ç–æ–≤ (—Å—Ç–∞—Ä–∞—è)'}
          </span>
        </div>
        
        {useOpenTables && (
          <div className="open-tables-info">
            <p>‚ú® –í —Ä–µ–∂–∏–º–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å—Ç–æ–ª–æ–≤:</p>
            <ul>
              <li>‚Ä¢ –õ—é–±–æ–π –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é</li>
              <li>‚Ä¢ –ò–≥—Ä–æ–∫–∏ —Å–∞–º–∏ –≤—ã–±–∏—Ä–∞—é—Ç –ø–æ–∑–∏—Ü–∏–∏ –∑–∞ —Å—Ç–æ–ª–æ–º</li>
              <li>‚Ä¢ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–≥–¥–∞ –≤—Å–µ —Å–µ–ª–∏</li>
              <li>‚Ä¢ –ù–µ—Ç —Å–∏—Å—Ç–µ–º—ã —Ö–æ—Å—Ç–æ–≤</li>
            </ul>
          </div>
        )}
      </div>

      {/* üî• –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: ID —Å–µ—Å—Å–∏–∏ */}
      {showSessionId && sessionId && (
        <div className="session-id-display">
          <h3>üÜî ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏</h3>
          <div className="session-id-box">
            <code>{sessionId}</code>
            <button
              onClick={() => {
                navigator.clipboard.writeText(sessionId);
                toast.success('ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
              }}
              className="copy-button"
            >
              üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
            </button>
          </div>
          <p className="session-hint">
            –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º ID —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏
          </p>
        </div>
      )}

      {/* ... existing form content ... */}

      {/* üî• –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ö–ù–û–ü–ö–ò */}
      <div className="action-buttons">
        {useOpenTables ? (
          // –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
          <>
            <button
              onClick={createOpenSession}
              className="create-session-button open-tables"
              disabled={tableCount < 1}
            >
              üèóÔ∏è –°–æ–∑–¥–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å—Ç–æ–ª—ã ({tableCount})
            </button>
            
            <button
              onClick={joinOpenSessionFromClipboard}
              className="join-session-button open-tables"
            >
              üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏
            </button>
          </>
        ) : (
          // –°—Ç–∞—Ä–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏)
          <>
            <button
              onClick={createSession}
              className="create-session-button"
              disabled={tableCount < 1 || (!isPlayerSelected && gameMode === 'modern')}
            >
              üéÆ –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é ({tableCount} {tableCount === 1 ? '—Å—Ç–æ–ª' : '—Å—Ç–æ–ª–∞'})
            </button>
            
            <button
              onClick={joinSessionFromClipboard}
              className="join-session-button"
            >
              üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏
            </button>
          </>
        )}
      </div>

      {/* ... existing content ... */}
    </div>
  );
};

export default TestWindow; 